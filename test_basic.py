#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è IskBot
"""

import os
import sys
import unittest

from cal import calculate_duty
from main import get_court_by_address

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


class TestBasicFunctions(unittest.TestCase):
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""

    def test_court_detection_moscow(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–¥–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã."""
        address = "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1"
        court_name, court_address = get_court_by_address(address)
        self.assertIsNotNone(court_name)
        self.assertIn("–ú–æ—Å–∫–≤—ã", court_name)

    def test_court_detection_spb(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–¥–∞ –¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞."""
        address = "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 100"
        court_name, court_address = get_court_by_address(address)
        self.assertIsNotNone(court_name)
        self.assertIn("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", court_name)

    def test_court_detection_moscow_region(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–¥–∞ –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏."""
        address = "–≥. –ü–æ–¥–æ–ª—å—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1"
        court_name, court_address = get_court_by_address(address)
        self.assertIsNotNone(court_name)
        # –ü–æ–¥–æ–ª—å—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        self.assertIn("–ø–æ –º–µ—Å—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è", court_name)

    def test_duty_calculation_small(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã –¥–ª—è –º–∞–ª–æ–π —Å—É–º–º—ã."""
        result = calculate_duty(50000)
        self.assertNotIn("error", result)
        self.assertEqual(result["duty"], 10000)

    def test_duty_calculation_medium(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Å—É–º–º—ã."""
        result = calculate_duty(500000)
        self.assertNotIn("error", result)
        self.assertTrue(int(result["duty"]) > 10000)

    def test_duty_calculation_large(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã –¥–ª—è –±–æ–ª—å—à–æ–π —Å—É–º–º—ã."""
        result = calculate_duty(5000000)
        self.assertNotIn("error", result)
        self.assertTrue(int(result["duty"]) > 55000)

    def test_duty_calculation_invalid(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—É–º–º—ã."""
        result = calculate_duty(-1000)
        self.assertIn("error", result)


def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ IskBot...")

    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestBasicFunctions)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.wasSuccessful():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(
            f"\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {len(result.failures)} –æ—à–∏–±–æ–∫, {len(result.errors)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        return False


if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)
